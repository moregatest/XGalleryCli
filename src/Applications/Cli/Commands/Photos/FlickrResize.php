<?php
/**
 * Copyright (c) 2019 JOOservices Ltd
 * @author Viet Vu <jooservices@gmail.com>
 * @license GPL
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */

namespace XGallery\Applications\Cli\Commands\Photos;

use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\FetchMode;
use Gumlet\ImageResize;
use Gumlet\ImageResizeException;
use ReflectionException;
use stdClass;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;
use XGallery\Applications\Cli\Commands\AbstractCommandPhotos;
use XGallery\Defines\DefinesCore;
use XGallery\Exceptions\Exception;

/**
 * Class FlickrResize
 * @package XGallery\Applications\Cli\Commands\Photos
 */
class FlickrResize extends AbstractCommandPhotos
{
    /**
     * @var integer
     */
    private $photoId;

    /**
     * @var stdClass
     */
    private $photo;

    /**
     * @var string
     */
    private $localFile;

    /**
     * @throws ReflectionException
     */
    protected function configure()
    {
        $this->options = [
            'photo_id' => [
                'description' => 'Specific photo id',
                'default' => null,
            ],
            'width' => [
                'description' => 'Resize width',
                'default' => 1920,
            ],
            'height' => [
                'description' => 'Resize height',
                'default' => 1080,
            ],
            'position' => [
                'description' => '1: Top; 2: Center; 3: Bottom; 4: Left; 5: Right',
                'default' => ImageResize::CROPCENTER,
            ],
        ];

        parent::configure(); // TODO: Change the autogenerated stub
    }

    /**
     * @return boolean
     * @throws DBALException
     */
    protected function prepare()
    {
        parent::prepare();

        if (!$this->getPhoto()) {
            return false;
        }

        return true;
    }

    /**
     * @param array $steps
     * @return boolean
     */
    protected function process($steps = [])
    {
        return parent::process(
            [
                'resize',
            ]
        );
    }

    /**
     * @return bool|mixed
     * @throws DBALException
     */
    protected function getPhoto()
    {
        static $retry = false;
        $this->photoId = $this->input->getOption('photo_id');

        if (!$this->photoId) {
            $this->logNotice('No photo id provided');
            $this->output->writeln("\n".'No photo id provided');

            return false;
        }

        $this->info('Work on photo id: '.$this->photoId);

        try {
            if (!$retry) {
                $this->info('Try to download photo');
                $retry = true;

                $process = new Process(
                    ['php', 'cli.php', 'flickr:photodownload', '--photo_id='.$this->photoId],
                    null,
                    null,
                    null,
                    DefinesCore::MAX_EXECUTE_TIME
                );
                $process->start();
                $process->wait();

                return $this->getPhoto();
            }

            $this->photo = $this->connection->executeQuery(
                'SELECT `id`, `owner`, `params` FROM `xgallery_flickr_photos` WHERE `id` = ? LIMIT 1',
                [$this->photoId]
            )->fetch(FetchMode::STANDARD_OBJECT);

            if (!$this->photo) {
                $this->logNotice('Can not get photo from database');

                return false;
            }

            if ($this->photo->params === null && $retry === true) {
                $this->info('Photo have no params');
                $this->logNotice('Photo have no params');

                return false;
            }

            $this->photo->params = json_decode($this->photo->params);

            return $this->getMediaFile();

        } catch (Exception $exception) {
            $this->logError($exception->getMessage());
        }

        return false;
    }

    /**
     * @return boolean
     */
    private function getMediaFile()
    {
        $lastSize = end($this->photo->params);

        if (!$lastSize) {
            return false;
        }

        $this->info('Got sized', (array)$lastSize);

        $fileName        = basename($lastSize->source);
        $this->localFile = getenv('flickr_storage').'/'.$this->photo->owner.'/'.$fileName;

        return (new Filesystem())->exists($this->localFile);
    }

    /**
     * @return bool
     * @throws ImageResizeException
     */
    protected function resize()
    {
        if (!$this->localFile) {
            $this->logNotice('Local file not found');

            return false;
        }

        chmod($this->localFile, 644);
        $imageSize    = getimagesize($this->localFile);
        $resizeWidth  = $this->input->getOption('width');
        $resizeHeight = $this->input->getOption('height');

        $this->info('Local file: '.$this->localFile);
        $this->info('Dimension: '.implode(',', $imageSize));
        $this->info('Resize: '.$resizeWidth.'x'.$resizeHeight);

        if ($imageSize[0] < $resizeWidth && $imageSize[1] < $resizeHeight) {
            $this->logNotice('Target image dimension is larger then source');

            return false;
        }

        $saveTo = getenv('photos_storage').'/'.$resizeWidth.'x'.$resizeHeight.'/'.basename($this->localFile);
        (new Filesystem())->mkdir(getenv('photos_storage').'/'.$resizeWidth.'x'.$resizeHeight);

        $imager = new ImageResize($this->localFile);
        $imager
            ->crop($resizeWidth, $resizeHeight, false, $this->input->getOption('position'))
            ->save($saveTo, null, 100);
        $this->info('Resized: '.$saveTo.' with dimension: '.$imager->getDestWidth().' x '.$imager->getDestHeight());

        return true;
    }
}